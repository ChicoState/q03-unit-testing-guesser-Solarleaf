        -:    0:Source:Guesser.cpp
        -:    0:Graph:Guesser.gcno
        -:    0:Data:Guesser.gcda
        -:    0:Runs:1
        -:    1:#include "Guesser.h"
        -:    2:#include <string>
        -:    3:
        -:    4:#include <iostream>
        -:    5:
        -:    6:using std::string;
        -:    7:
        -:    8:/*
        -:    9:  Returns an whole number representing the distance between the guess,
        -:   10:  provided as an argument, and the secret. The distance represents the number
        -:   11:  of characters that would have to be changed at the same location to match
        -:   12:  the other string. When the two strings are identical, the distance is 0,
        -:   13:  but for each letter different, the distance increases by 1. When the
        -:   14:  strings are different lengths, each of the extra characters in the longer
        -:   15:  string also counts as an increase in 1 to the distance, up to the length of
        -:   16:  the secret; in other words, if m_secret has a 10 characters and the guess
        -:   17:  has 100, the distance is 10.
        -:   18:*/
        -:   19:
        -:   20:// PRIVATE
function _ZN7Guesser8distanceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 14 returned 100% blocks executed 100%
       14:   21:unsigned int Guesser::distance(string guess)
        -:   22:{
        -:   23:  // Checks difference in length
       14:   24:  int counter{0};
       14:   25:  size_t l_guess = guess.length();
call    0 returned 14
       14:   26:  size_t l_secret = m_secret.length();
call    0 returned 14
       14:   27:  counter = abs(l_guess - l_secret);
       14:   28:  if (l_guess > l_secret)
branch  0 taken 12 (fallthrough)
branch  1 taken 2
        -:   29:  {
       12:   30:    guess = guess.substr(0, l_secret);
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 12
call    4 returned 12
        -:   31:  }
        -:   32:  // Checks difference in character
        -:   33:  // The check for both makes it so if the guess is shorter not double penalized for diff letters
       62:   34:  for (size_t k = 0; k < l_guess && k < l_secret; k++)
branch  0 taken 60 (fallthrough)
branch  1 taken 2
branch  2 taken 48
branch  3 taken 12 (fallthrough)
        -:   35:  {
       48:   36:    if (m_secret[k] == guess[k])
call    0 returned 48
call    1 returned 48
branch  2 taken 46 (fallthrough)
branch  3 taken 2
        -:   37:    {
       46:   38:      continue;
        -:   39:    }
        2:   40:    ++counter;
        -:   41:  }
       14:   42:  if(counter > l_secret) {
branch  0 taken 2 (fallthrough)
branch  1 taken 12
        2:   43:    counter = l_secret;
        -:   44:  }
       14:   45:  return counter;
        -:   46:}
        -:   47:
        -:   48:/*
        -:   49:  Constructor requires that the secret phrase is provided its value as
        -:   50:  an argument. This secret will not change for the lifespan of an instance
        -:   51:  of any Guesser object and must have a length of 32 characters or less,
        -:   52:  otherwise, it will be truncated at that length.
        -:   53:*/
        -:   54:
function _ZN7GuesserC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8 returned 100% blocks executed 80%
        8:   55:Guesser::Guesser(string secret){
call    0 returned 8
        8:   56:  m_remaining = 0;
        8:   57:  m_secret = secret;
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -:   58:  // m_secret = "AabB1234!@#keazZ\naa";
        8:   59:}
call    0 never executed
        -:   60:
        -:   61:/*
        -:   62:  Determines and returns whether the provided guess matches the secret
        -:   63:  phrase. However, the function also returns false if the secret is locked,
        -:   64:  which happens if either (or both): 
        -:   65:    (A) there are no remaining guesses allowed
        -:   66:    (B) the function detects brute force, as indicated by a guess that has a
        -:   67:        distance greater than 2 from the secret
        -:   68:  See the remaining() and distance() functions for specifications regarding
        -:   69:  determining how many guesses are remaining and the distance between a guess
        -:   70:  and the secret.
        -:   71:*/
function _ZN7Guesser5matchENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 21 returned 100% blocks executed 89%
       21:   72:bool Guesser::match(string guess){
        -:   73:  // We don't want a count down because m_remaining is an unsigned, so you could have an overflow
        -:   74:  // Which would give you a lot of guesses
        -:   75:
       21:   76:  if (remaining() >= 3)
call    0 returned 21
branch  1 taken 5 (fallthrough)
branch  2 taken 16
        -:   77:  {
        5:   78:    return false;
        -:   79:  }
       16:   80:  else if (guess == m_secret)
call    0 returned 16
branch  1 taken 2 (fallthrough)
branch  2 taken 14
        -:   81:  {
        2:   82:    m_remaining = 0;
        2:   83:    return true;
        -:   84:  }
        -:   85:  // This is the null check and the overflow check
       14:   86:  int temp = remaining();
call    0 returned 14
       14:   87:  m_remaining += distance(guess);
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 14
branch  4 taken 14 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 14
call    7 never executed
       14:   88:  if (temp >= m_remaining || temp < 0)
branch  0 taken 13 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 13
        -:   89:  {
        1:   90:    m_remaining = 5;
        -:   91:    // std::cerr<<"Something went wrong\n";
        -:   92:  }
       14:   93:  return false;
        -:   94:}
        -:   95:
        -:   96:/*
        -:   97:  Returns the number of guesses remaining. A Guesser object allows up to
        -:   98:  three (3) consecutive guesses without a match. If three guesses are made
        -:   99:  without any being a true match, the secret is locked. However, whenever
        -:  100:  an unlocked secret is guessed with a true match, the guesses remaining
        -:  101:  reset to three (3).
        -:  102:*/
function _ZN7Guesser9remainingEv called 38 returned 100% blocks executed 100%
       38:  103:unsigned int Guesser::remaining(){
       38:  104:  return m_remaining;
        -:  105:}
        -:  106:
